Scripted code

node {
    // Define the Maven goals
    def mavenGoals = 'clean install'
    
    // Define Git repository details
    def gitBranch = 'main'
    def gitCredentialsId = 'github_creds'
    def gitUrl = 'https://github.com/GaneshkumarVarre/gs-maven.git'

    try {
        // Checkout the code from GitHub
        stage('Checkout') {
            checkout([
                $class: 'GitSCM',
                branches: [[name: "*/${gitBranch}"]],
                userRemoteConfigs: [[url: gitUrl, credentialsId: gitCredentialsId]]
            ])
        }

        // Build the project using Maven
        stage('Build') {
            dir('complete') {
                // Use the default Maven installation on the Jenkins node
                sh "/opt/maven/bin/mvn ${mavenGoals}"
            }
        }

        // Archive the build artifacts (if any)
        stage('Archive') {
            dir('complete') {
                archiveArtifacts artifacts: '*/target/.jar', allowEmptyArchive: true
            }
        }

        // Run tests (if any)
        stage('Test') {
            dir('complete') {
                sh "/opt/maven/bin/mvn test"
            }
        }

        // Optional: publish test results
        stage('Publish Test Results') {
            dir('complete') {
                junit '*/target/surefire-reports/.xml'
            }
        }

    } catch (Exception e) {
        currentBuild.result = 'FAILURE'
        throw e
    } finally {
        // Clean up or other post-build actions can go here
    }
}



docker info: It will give status of weather docker is running or not  and also It will display the detailed information about docker engine. 

docker version: Show the Docker version information.

docker images (OR) docker image ls : List all images that are locally stored with the Docker engine.

docker run <<Docker Image>> : It will run the docker image.

Example: docker run hello-world: This command will download the hello-world image, if it is not already present, and run the hello-world as a container.

docker images <<Image Name>>: It will display the information about image.

docker images -q: It will display only the images IDs.

docker rmi << Image ID/Image Name>> (OR) docker image rm << Image ID/Image Name>>: It will delete an image from the local image store.
Example: docker rmi nginx

docker rmi $(docker images -q) (OR) docker rmi -f $(docker images -q) : It will remove all the images from docker engine.

docker run --name “hello-world-container” helloworld: Start the hello-world image with “hello- world-container” container name. 

docker create “hello-world-cont” helloworld : It will create a container called “hello-world-cont” from the image hello-world and it won’t start the container.

docker ps (OR) docker container ls: Lists running containers
(It will not display the stopped containers)

docker ps –a (OR) docker container ls --all (OR) docker container -a: Lists all containers (It will display the stopped containers along with running containers.)
                                                    
docker start <Container name|id>: It will start the container.

docker start webserver: It will start the webserver.

docker stop <container name|id> (OR) docker container stop <container name|id>: It will stop the docker container.

docker stop webserver: It will stop the container called webserver.

docker pause CID/CNAME: It will pause the container.

docker unpause CID/CNAME: It will unpause the container.

Docker Container status are, created, restarting, running, removing, paused, exited, or dead

docker ps -a --filter "name=mithun16thjune": It will display all the containers with name mithun16thjune name.

docker ps -a --filter 'exited=0' :

docker ps --filter status=running: It will display the all the running state containers.

docker ps --filter status=paused: It will display the all the paused state containers.

docker logs <container name>: It will display the logs for that container.

docker logs --tail 100 <<Container Name>>: Print the last 100 lines of a container’s logs.

docker top <<Container ID>>: This will shows the top processes in within in a container.

docker reanme <<Container Old Name>> <<Container New Name>>: It will rename the conatiner.

docker rm -f <<Container Name>>: It will remove the container.

docker rm -f webserver: It will stop and remove the running container with a single command.

docker stop $(docker ps -a -q): It will stop all the containers.

docker rm -f $(docker ps -aq): Delete all running and stopped containers.

docker kill <<CID/C Name>>: It will kill the container.

docker container prune: It will delete all stopped containers.

docker search <<Image Name>>: It will search all of the publicly available images on Docker
Hub(https://hub.docker.com).

docker pull <<Image Name>: Pull an image from Docker Hub

docker inspect <<CID>> : It will give information for container.

docker attach <<CID>> : It will connect to running container.

docker exec <<CID>> : Run a linux command in a running container.

docker stats <<CID>> : It will display a live stream of container resource usage statics.

docker network ls: List the networks.

docker network create mithuntechnologies : It will create the network with name called as mithuntechnologies.

docker network inspect bridge: Display detailed information on one or more networks.

docker network connect: Connect a container to a network.

docker network prune: Remove all unused networks.

docker run -it -v /Users/mithunreddyl/Desktop/dockervolumes:/mithuntechnoVol1 ubuntu : Create a container with volume mithuntechnoVol1.


docker run -it -v /Users/mithunreddyl/Desktop/dockervolumes:/mithuntechnoVol1:ro --name ubuntucontainer16 ubuntu : Create the Read only Volume.


docker run -it --volumes-from ubuntucontainer16 --name ubuntucontainer1604 ubuntu:16.04:
Create a container ubuntucontainer1604 that uses the same volumes as ubuntucontainer16

Can I mount same volume to multiple docker containers?
Ans) Yes you can add same location as a volume to many docker containers.

docker login: To sign into the Docker Hub.

docker logout: To logout from the Docker Hub. If no server is specified, then the default is used.



HTTP status codes are three-digit numbers returned by web servers to indicate the status of the requested resource. The status codes are grouped into five categories based on their first digit:

1xx (Informational): The request was received, and the server is continuing to process the request.

2xx (Successful): The request was successful, and the server has returned the requested resource. Examples include 200 OK, which indicates that the request was successful, and 204 No Content, which indicates that the request was successful but there is no content to return.

3xx (Redirection): The request could not be completed as requested, and the server is providing instructions for the client to follow. Examples include 301 Moved Permanently, which indicates that the requested resource has been permanently moved to a new location, and 302 Found, which indicates that the requested resource has been temporarily moved to a new location.

4xx (Client Error): The request contains bad syntax or cannot be fulfilled by the server. Examples include 404 Not Found, which indicates that the requested resource could not be found on the server, and 401 Unauthorized, which indicates that the requested resource requires authentication.

5xx (Server Error): The server encountered an error while processing the request. Examples include 500 Internal Server Error, which indicates that the server encountered an unexpected condition that prevented it from fulfilling the request, and 503 Service Unavailable, which indicates that the server is temporarily unavailable and cannot handle the request.

HTTP status codes provide a standardized way of communicating the result of a request to the client, allowing for better error handling and troubleshooting.

